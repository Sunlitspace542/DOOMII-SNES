@database ACCESS.guide
@rem $VER:XHelpGuide 3.1 © 1993-1995 Randy Linden
@wordwrap
@index INDEX

@node MAIN
@title "ACCESS Development System 3.0 Help"

@{jcenter}
@{b}@{u}A C C E S S   D E V E L O P M E N T   S Y S T E M   3 . 0@{ub}@{uu}


@{b}@{u}Copyright © 1986-1995 Randy Linden@{ub}@{uu}


@{" Assembler " link XA}

@{" Linker " link XL}

@{" Debugger " link XS}

@{" Graphics Convertor " link XG}

@{" Compressor " link XC}

@{" Cutter " link CUTTER}

@{" Version Lister " link XX}



@{" Expression Evaluation " link EXPEVAL}

@{" 6502 " link 6502}

@{" 65816 " link 65816}

@{" SPC700 " link SPC700}

@{" SFX " link SFX}


@{" Index " link INDEX}
@endnode


@node XA "ACCESS Assembler Help"

@{jcenter}
@{b}@{u}ACCESS Cross Assembler@{ub}@{uu}
@{jleft}@{lindent 2}

Synopsis:   The ACCESS Cross Assembler is used translate @{" Source Files " link SOURCEFILE}
            from their ASCII text into @{" Object Files " link OBJECTFILE} that are passed
            to the @{" Linker " link XL} which creates the final executable program.



Command:    XA -option -option -option


Options:    -aSourceFile         Input @{" Source File " link SOURCEFILE} Name

            -oObjectFile         Output @{" Object File " link OBJECTFILE} Name

            -dSymDumpFile        Output @{" Symbol File " link SYMFILE} Name

                                 · May be specified as "*" to send output
                                   to console.

            -v                   Verbose Operation

            -q                   Quiet Operation

            -s                   Adds Source Level Debugging Information

            -cCPUType            CPU Type.  May be any of:   @{" 6502 " link 6502}
                                                             @{" 65816 " link 65816}
                                                             @{" SPC700 " link SPC700}
                                                             @{" SFX " link SFX}
@endnode


@node XL "ACCESS Linker Help"

@{jcenter}
@{b}@{u}ACCESS Cross Linker@{ub}@{uu}
@{jleft}@{lindent 2}

Synopsis:   The ACCESS Cross Linker is used combine many @{" Object Files " link OBJECTFILE}
            created by the @{" Assembler " link XA} into a single executable program
            for use with the @{" Debugger " link XS}



Command:    XL object1 object2 object3 object4 -option -option -option


Options:    object1,object2...   @{" Object File " link OBJECTFILE} Name to include

            -lLinkFile           @{" Link File " link LINKFILE} Name

            -eExecFile           Output @{" Executable File " link EXECFILE} Name

            -dSymDumpFile        Output @{" Symbol File " link SYMFILE} Name

                                 · May be specified as "*" to send output
                                   to console.

            -cCrossRefFile       Output @{" Cross Reference File " link XREFFILE} Name

            -kChunkListFile      Output @{" Chunk List File " link CHUNKFILE} Name

            -tSectionFile        Output @{" Section List File " link SECTIONFILE} Name

            -v                   Verbose Operation

            -q                   Quiet Operation

            -u                   Dump UnDefined Symbol List to console

            -s                   Adds Source Level Debugging Information

            -w                   Adds Symbolic Debugging Information

            -y                   Adds Local Label Information

            -z                   Adds External Label Information

            -pPrintFile          Output @{" Print File " link PRINTFILE} Name
@endnode


@node XS
@title "ACCESS Debugger Help"

@{jcenter}
@{b}@{u}ACCESS Source Level Debugger@{ub}@{uu}
@{jleft}@{lindent 2}

Synopsis:   The ACCESS Source Level Debugger is used with a single
            executable program that was created by the @{" Linker " link XL}
            to help in the debugging process.


Command:    XS execfile -option -option -option


Options:    -eExecFile           Input @{" Executable File " link EXECFILE} Name
                                 Prefix of -e is optional

            -kConfigFile         @{" Configuration File " link CONFIGFILE} Name

            -tToggleName         Reverse default of @{" Toggle " link TOGGLES} Option

            -n                   Does not load Executable File to Target

            -c                   Does not load CharacterROM Data to Target

            -x                   Does not load ProgramRAM Data to Target

            -z                   Does not load ZeroPageRAM Data to Target
                                 (Disallows use of PacketTransfer to Target)

            -q                   QuickLoad operation.  Does not display load
                                 addresses as download progresses

            -a                   AutoBoot operation.  Loads program, starts
                                 execution and exits debugger leaving program
                                 running.

            -bSerialBaud         Serial Baud Rate to use for Target

            -sSlaveName          SlaveName of Target.  May be any of:
                                    ACCESS      (Access Debugging Hardware)
                                    COMSPEC_SE  (NOA ICE SE)
                                    NDS2        (Sculptured Software NDS2)
                                    PROTO       (Access ProtoType Hardware)
                                    SCSI_SE     (NOA ICE SE)
                                    SERIAL      (Apple II/Apple IIGS)
                                    SFX2        (Sculptured Software SFX2)
                                    WIRE        (SNES or SNES/FX)

            -iSCSIDeviceName     Device name (Case-Sensitive) for SCSI
                                 communication with Target

            -l                   LongBrk operation on Target

            -mMonitorID          MonitorID to use for display
            -wMonitorWidth       Width in pixels of Monitor Display
            -hMonitorHeight      Height in pixels of Monitor Display
            -dMonitorDepth       Depth in bitplanes of Monitor Display

            -fFontName           Font name (Case-Sensitive) for display
            -gFontSize           Font size for display
@endnode


@node XG
@title "ACCESS Graphics Convertor Help"

@{jcenter}
@{b}@{u}ACCESS Graphics Convertor@{ub}@{uu}
@{jleft}@{lindent 2}
More sample text
@endnode


@node XC "ACCESS Compressor Help"

@{jcenter}
@{b}@{u}ACCESS Data Compressor@{ub}@{uu}
@{jleft}@{lindent 2}
This is a sample text
@endnode


@node CUTTER "ACCESS Cutter Help"

@{jcenter}
@{b}@{u}ACCESS Image Cutter@{ub}@{uu}
@{jleft}@{lindent 2}
This is a sample text
@endnode


@node XX "ACCESS Version Lister Help"

@{jcenter}
@{b}@{u}ACCESS Version Lister@{ub}@{uu}
@{jleft}@{lindent 2}
This is a sample text
@endnode


@node SOURCEFILE "ACCESS Source File Help"

@{jcenter}
@{b}@{u}Source File@{ub}@{uu}
@{jleft}@{lindent 2}

A Source File is an ASCII text file which contains the English-like
OpCodes and PseudoOps for a particular processor set.
@endnode


@node OBJECTFILE "ACCESS Object File Help"

@{jcenter}
@{b}@{u}Object File@{ub}@{uu}
@{jleft}@{lindent 2}

An Object File is an encoded binary file which contains a processed
version of the machine code instructions from a @{" Source File " link SOURCEFILE} as
well as specific commands that direct the operation of the @{" Linker " link XL}
@endnode


@node LINKFILE "ACCESS Link File Help"

@{jcenter}
@{b}@{u}Link File@{ub}@{uu}
@{jleft}@{lindent 2}

A Link File is an ASCII text file which contains the names of all
@{" Object Files " link OBJECTFILE} which are to be included in the link.
@endnode


@node EXECFILE "ACCESS Executable File Help"

@{jcenter}
@{b}@{u}Executable File@{ub}@{uu}
@{jleft}@{lindent 2}

An Executable File is an encoded binary file which contains the resulting
program as well as debugging information for the @{" Debugger " link XS}
@endnode


@node SYMFILE "ACCESS Symbol Dump File Help"

@{jcenter}
@{b}@{u}Symbol Dump File@{ub}@{uu}
@{jleft}@{lindent 2}

A Symbol Dump File is an ASCII text file which contains a listing of
all known variables and equates and their respective values.
@endnode


@node PRINTFILE "ACCESS Print File Help"

@{jcenter}
@{b}@{u}Print File@{ub}@{uu}
@{jleft}@{lindent 2}

A Print File is an ASCII text file which contains a complete listing of
the completed program.
@endnode


@node XREFFILE "ACCESS Cross Reference File Help"

@{jcenter}
@{b}@{u}Cross Reference File@{ub}@{uu}
@{jleft}@{lindent 2}

A Cross Reference File is an ASCII text file which contains a complete
listing of all variables and labels and their cross references.  This
file will show where each symbol was defined, and each location where
it is referenced.
@endnode


@node CHUNKFILE "ACCESS Chunk List File Help"

@{jcenter}
@{b}@{u}Chunk List File@{ub}@{uu}
@{jleft}@{lindent 2}

A Chunk List File is an ASCII text file which lists each load chunk
within the completed program.  Each line shows the Starting and Ending
@{" LoadPC " link LOADPC}, Starting and Ending @{" CApc " link CAPC} and Size of the Chunk.
@endnode


@node SECTIONFILE "ACCESS Section List File Help"

@{jcenter}
@{b}@{u}Section List File@{ub}@{uu}
@{jleft}@{lindent 2}

A Section List File is an ASCII text file which lists each Section
within the completed program.  Each line shows the name of the Section,
the Starting @{" LoadPC " link LOADPC} and @{" CApc " link CAPC} and the Size of the Section.
@endnode


@node CONFIGFILE "ACCESS Configuration File Help"

@{jcenter}
@{b}@{u}Configuration File@{ub}@{uu}
@{jleft}@{lindent 2}

A Configuration File is an ASCII text file which contains options
that are passed to the @{" Debugger " link XS} at startup.  Lists of Window
locations, BreakPoints, etc. are also stored here by the Debugger
when the configuration is saved.
@endnode


@node LOADPC "ACCESS LoadPC Help"

@{jcenter}
@{b}@{u}LoadPC@{ub}@{uu}
@{jleft}@{lindent 2}

The LoadPC is the address at which the @{" Assembler " link XA}, @{" Linker " link XL} and
@{" Debugger " link XS} relate the current code/data to it's physical device.

LoadPC addresses are specified in the following 32-bit format:

        $MT BB HH LL

        MT     represents the type of memory being referenced
        BBHHLL represents the address within that type of memory

Valid MT Memory types are:       $00    Program RAM
                                 $20    Video RAM
                                 $21    Video RAM Words
                                 $30    Object Attribute RAM
                                 $31    Object Attribute RAM Words
                                 $40    Colour Generator RAM
                                 $41    Colour Generator RAM Words
                                 $80    Program ROM
                                 $A0    Character ROM

An example address of $80008000 gives offset $8000 within the Program
ROM space.  This would be the equivalent of Bank $01 address $8000 in
Mode20 on the SNES.

An example address of $21001000 gives offset $1000 Words within the
Video RAM space on the SNES.  The equivalent address in Bytes would
be $20002000.  Both addresses would show the same data at different
sizes.
@endnode


@node CAPC "ACCESS CApc Help"

@{jcenter}
@{b}@{u}CApc@{ub}@{uu}
@{jleft}@{lindent 2}

The CApc is the address at which the @{" Assembler " link XA}, @{" Linker " link XL} and
@{" Debugger " link XS} relate the current code/data to it's executable address.

CApc addresses are specified as a full 32-bit address.  No interpretation
is done.
@endnode


@node TOGGLES "ACCESS Debugger Toggles Help"

@{jcenter}
@{b}@{u}Debugger Toggles@{ub}@{uu}
@{jleft}@{lindent 2}

A Debugger Toggle allows the default state of an option within the
@{" Debugger " link XS} to be changed.

Available Toggles are:

AM        AutoMode                 Switches between 8/16 bit in Unassembly
                                   windows

AMA       AutoMode Assemble        Switches to correct size when assembling
                                   inline in Unassembly window

AMS       AutoMode Show            Changes colour of disassembly text in
                                   Unassembly window of code that is not
                                   in proper mode

AMW       AutoMode Warn            Warns of code about to be executed when
                                   not in proper mode


CC        Cycle Count Display      Adds cycle count display to left-side
                                   of Unassembly window


FS        Full Source Display      Displays full lines of source code in
                                   Unassembly window

SL        Source Level Display     Displays disassembled lines of code
                                   along with source comments in Unassembly
                                   window


LL        Local Labels Enable      Allows Local Labels into the pool of
                                   symbols examined for symbolic references

LS        Local Symbols Enable     Allows Local Symbols into the pool of
                                   symbols examined for symbolic references


EX        Externals Enable         Allows External Symbols into the pool of
                                   symbols examined for symbolic references
@endnode


@node EXPEVAL "ACCESS Expression Evaluation Help"

@{jcenter}
@{b}@{u}Expression Evaluation@{ub}@{uu}
@{jleft}@{lindent 2}


The order of Expression Evaluation is as follows:


  1.        Brackets                       (  )

  2.        Unary Operators                +  -  ~

  3.        High/Low/Bank                  >  <  ^

  4.        Arithmetic Shift Right         ]]

  5.        Logical Shift Left/Right       <<  >>

  6.        Multiply/Divide                *   /

  7.        Addition/Subtraction           +   -

  8.        Or / And / Exclusive Or        |   &   !
@endnode


@node 6502 "ACCESS CPU 6502 Help"

@{jcenter}
@{b}@{u}6502 Processor@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" OpCodes " link 6502OPS}

  @{" Common PseudoOps " link PSOPS}

  @{" 6502 PseudoOps " link 6502PSOPS}
@endnode


@node 65816 "ACCESS CPU 65816 Help"

@{jcenter}
@{b}@{u}65816 Processor@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" OpCodes " link 65816OPS}

  @{" Common PseudoOps " link PSOPS}

  @{" 65816 PseudoOps " link 65816PSOPS}
@endnode


@node SPC700 "ACCESS CPU SPC700 Help"

@{jcenter}
@{b}@{u}SPC700 Processor@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" OpCodes " link SPC700OPS}

  @{" Common PseudoOps " link PSOPS}

  @{" SPC700 PseudoOps " link SPC700PSOPS}
@endnode


@node SFX "ACCESS CPU SFX Help"

@{jcenter}
@{b}@{u}SFX Processor@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" OpCodes " link SFXOPS}

  @{" Common PseudoOps " link PSOPS}

  @{" SFX PseudoOps " link SFXPSOPS}
@endnode


@node PSOPS "ACCESS Common PseudoOps Help"

@{jcenter}
@{b}@{u}Common Processor PseudoOps@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" .ENDIF " link ENDIF}             Ends Conditional Block

  @{" .IFN " link IFN}               Begins Conditional block

  @{" = " link EQU}                  Creates fixed value variable

  @{" END " link END}                Ends source file

  @{" ENDIF " link ENDIF}              Ends Conditional block

  @{" ENDM " link ENDMAC}               Ends Macro definition block

  @{" ENDMAC " link ENDMAC}             Ends Macro definition block

  @{" ENDREP " link ENDREP}             Ends Repeat definition block

  @{" EQU " link EQU}                Creates fixed value variable

  @{" EXTERN " link EXTERN}             Marks External Symbols Visible

  @{" GLOBALS " link GLOBALS}            Sets default action for UnDefineds

  @{" IFE " link IFE}                Begins Conditional block

  @{" IFN " link IFN}                Begins Conditional block

  @{" INCLUDE " link INCLUDE}            Includes additional source file

  @{" LOAD " link LOAD}               Defines @{" LoadPC " link LOADPC} address

  @{" MACRO " link MACRO}              Begins Macro definition block

  @{" ORG " link ORG}                Defines @{" CApc " link CAPC} address

  @{" PUBLIC " link PUBLIC}             Marks External Symbols Visible

  @{" REPEAT " link REPEAT}             Begins Repeat definition block

  @{" VAR " link VAR}                Creates redefinable variable
@endnode


@node 6502PSOPS "ACCESS 6502 PseudoOps Help"

@{jcenter}
@{b}@{u}6502 Processor PseudoOps@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" CHARSET " link CHARSET}            Change default mapping of ASCII CharSet

  @{" CPU " link CPU}                Define Target CPU

  @{" CPUDATA " link CPUDATA}            Send MMU information to Linker/Debugger

  @{" DUMP " link DUMP}               Dump current chunk to output file

  @{" IMAGE " link IMAGE}              Import a binary data file

  @{" LTEXT " link LTEXT}              Evaluates Text Expression at LinkTime

  @{" MMU " link MMU}                Define Target MMU

  @{" PLIST " link PLIST}              Change PrintListing control

  @{" REORG " link REORG}              Revert to previous Origin

  @{" SCROLL " link SCROLL}             Define Horizontal/Vertical Scroll

  @{" SECTION " link SECTION}            Define/Use Section

  @{" TEXT " link TEXT}               Evaluates Text Expression


  @{" DC.B   BYTE " link BYTE}        Inserts Bytes into code/data block

  @{" DC.W   WORD " link WORD}        Inserts Words into code/data block

  @{" DCB.B " link BBYTE}              Inserts ByteBlock into code/data

  @{" DCB.W " link BWORD}              Inserts WordBlock into code/data
@endnode


@node 65816PSOPS "ACCESS 65816 PseudoOps Help"

@{jcenter}
@{b}@{u}65816 Processor PseudoOps@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" .LONGA " link .LONGA}             Define Target CPU M Mode

  @{" .LONGI " link .LONGI}             Define Target CPU X Mode

  @{" ALIGN " link ALIGN}              Align the following code/data

  @{" CHARSET " link CHARSET}            Change default mapping of ASCII CharSet

  @{" CPU " link CPU}                Define Target CPU

  @{" CPUDATA " link CPUDATA}            Send MMU information to Linker/Debugger

  @{" DUMP " link DUMP}               Dump current chunk to output file

  @{" DBR " link DBR}                Define current DataBankRegister

  @{" DPR " link DPR}                Define current DirectPageRegister

  @{" IMAGE " link IMAGE}              Import a binary data file

  @{" LTEXT " link LTEXT}              Evaluates Text Expression at LinkTime

  @{" MMU " link MMU}                Define Target MMU

  @{" MODE " link MODE}               Define Target CPU Mode

  @{" PLIST " link PLIST}              Change PrintListing control

  @{" POPMODE " link POPMODE}            Save current Mode

  @{" PUSHMODE " link PUSHMODE}           Restore previous Mode

  @{" REORG " link REORG}              Revert to previous Origin

  @{" SCROLL " link SCROLL}             Define Horizontal/Vertical Scroll

  @{" SECTION " link SECTION}            Define/Use Section

  @{" TEXT " link TEXT}               Evaluates Text Expression


  @{" DC.1    DC.B   BYTE " link BYTE}               Inserts Bytes into code/data block

  @{" DC.2    DC.W   WORD " link WORD}               Inserts Words into code/data block

  @{" DC.3    DC.L   LONG " link TRIP}               Inserts Trips into code/data block

  @{" DC.4 " link LONG}                              Inserts Longs into code/data block

  @{" DCB.1   DS.1   DCB.B   DS.B   DS " link BBYTE}  Inserts ByteBlock into code/data

  @{" DCB.2   DS.2   DCB.W   DS.W " link BWORD}       Inserts WordBlock into code/data

  @{" DCB.3   DS.3   DCB.L   DS.L " link BTRIP}       Inserts TripBlock into code/data

  @{" DCB.4   DS.4 " link BLONG}                      Inserts LongBlock into code/data
@endnode


@node SPC700PSOPS "ACCESS SPC700 PseudoOps Help"

@{jcenter}
@{b}@{u}SPC700 Processor PseudoOps@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" CHARSET " link CHARSET}            Change default mapping of ASCII CharSet

  @{" CPU " link CPU}                Define Target CPU

  @{" CPUDATA " link CPUDATA}            Send MMU information to Linker/Debugger

  @{" DUMP " link DUMP}               Dump current chunk to output file

  @{" IMAGE " link IMAGE}              Import a binary data file

  @{" LTEXT " link LTEXT}              Evaluates Text Expression at LinkTime

  @{" MMU " link MMU}                Define Target MMU

  @{" PLIST " link PLIST}              Change PrintListing control

  @{" REORG " link REORG}              Revert to previous Origin

  @{" SCROLL " link SCROLL}             Define Horizontal/Vertical Scroll

  @{" SECTION " link SECTION}            Define/Use Section

  @{" TEXT " link TEXT}               Evaluates Text Expression


  @{" DC.B   BYTE " link BYTE}        Inserts Bytes into code/data block

  @{" DC.W   WORD " link WORD}        Inserts Words into code/data block

  @{" DCB.B " link BBYTE}              Inserts ByteBlock into code/data

  @{" DCB.W " link BWORD}              Inserts WordBlock into code/data
@endnode


@node SFXPSOPS "ACCESS SFX PseudoOps Help"

@{jcenter}
@{b}@{u}SFX Processor PseudoOps@{ub}@{uu}
@{jleft}@{lindent 2}


  @{" ALIGN " link ALIGN}              Align the following code/data

  @{" CHARSET " link CHARSET}            Change default mapping of ASCII CharSet

  @{" CPU " link CPU}                Define Target CPU

  @{" CPUDATA " link CPUDATA}            Send MMU information to Linker/Debugger

  @{" DUMP " link DUMP}               Dump current chunk to output file

  @{" IMAGE " link IMAGE}              Import a binary data file

  @{" LTEXT " link LTEXT}              Evaluates Text Expression at LinkTime

  @{" MMU " link MMU}                Define Target MMU

  @{" REORG " link REORG}              Revert to previous Origin

  @{" PLIST " link PLIST}              Change PrintListing control

  @{" SECTION " link SECTION}            Define/Use Section

  @{" TEXT " link TEXT}               Evaluates Text Expression


  @{" DC.1    DC.B   BYTE " link BYTE}               Inserts Bytes into code/data block

  @{" DC.2    DC.W   WORD " link WORD}               Inserts Words into code/data block

  @{" DC.3    DC.L   LONG " link TRIP}               Inserts Trips into code/data block

  @{" DC.4 " link LONG}                              Inserts Longs into code/data block

  @{" DCB.1   DS.1   DCB.B   DS.B   DS " link BBYTE}  Inserts ByteBlock into code/data

  @{" DCB.2   DS.2   DCB.W   DS.W " link BWORD}       Inserts WordBlock into code/data

  @{" DCB.3   DS.3   DCB.L   DS.L " link BTRIP}       Inserts TripBlock into code/data

  @{" DCB.4   DS.4 " link BLONG}                      Inserts LongBlock into code/data
@endnode


@node END "ACCESS PseudoOps END Help"

@{jcenter}
@{b}@{u}PseudoOps END Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Ends current source file


Usage:            END
@endnode


@node ENDIF "ACCESS PseudoOps ENDIF Help"

@{jcenter}
@{b}@{u}PseudoOps ENDIF/.ENDIF Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Ends current conditional block level


Usage:            ENDIF
@endnode


@node ENDMAC "ACCESS PseudoOps ENDMAC Help"

@{jcenter}
@{b}@{u}PseudoOps ENDM/ENDMAC Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Ends current macro definition block


Usage:            ENDM
Usage:            ENDMAC
@endnode


@node ENDREP "ACCESS PseudoOps ENDREP Help"

@{jcenter}
@{b}@{u}PseudoOps ENDREP Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Ends current repeat definition block


Usage:            ENDREP
@endnode


@node EQU "ACCESS PseudoOps EQU Help"

@{jcenter}
@{b}@{u}PseudoOps EQU/= Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Equates a Numeric Value to a Alphanumeric Symbol


Usage:        SymbolName EQU Expression


Notes:        · SymbolName cannot be any reserved names

              · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node EXTERN "ACCESS PseudoOps EXTERN Help"

@{jcenter}
@{b}@{u}PseudoOps EXTERN Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Makes given Symbol(s) visible to the Linker and Debugger


Usage:            EXTERN SymbolName,SymbolName,...
@endnode


@node GLOBALS "ACCESS PseudoOps GLOBALS Help"

@{jcenter}
@{b}@{u}PseudoOps GLOBALS Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Defaults all Symbols and Labels thereafter referenced
              and not yet defined to be assumed as @{" PUBLIC " link PUBLIC}


Usage:            GLOBALS ON/OFF
@endnode


@node IFE "ACCESS PseudoOps IFE Help"

@{jcenter}
@{b}@{u}PseudoOps IFE Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Begins a conditional block of code if Expression evaluates
              to a value of zero (0).


Usage:            IFE Expression


Notes:        · Expression follows order of operations

              · Expression must be evaluable at Assembly time
@endnode


@node IFN "ACCESS PseudoOps IFN Help"

@{jcenter}
@{b}@{u}PseudoOps IFN/.IFN Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Begins a conditional block of code if Expression evaluates
              to a value of non-zero (<>0).


Usage:            IFN Expression


Notes:        · Expression follows order of operations

              · Expression must be evaluable at Assembly time
@endnode


@node INCLUDE "ACCESS PseudoOps INCLUDE Help"

@{jcenter}
@{b}@{u}PseudoOps INCLUDE Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts named source file into assembly


Usage:            INCLUDE FileName
@endnode


@node LOAD "ACCESS PseudoOps LOAD Help"

@{jcenter}
@{b}@{u}PseudoOps LOAD Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Changes value of @{" LoadPC " link LOADPC} to Expression


Usage:            LOAD Expression


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node MACRO "ACCESS PseudoOps MACRO Help"

@{jcenter}
@{b}@{u}PseudoOps MACRO Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Begins a macro block of code associated with given name


Usage:        MacroName  MACRO
@endnode


@node ORG "ACCESS PseudoOps ORG Help"

@{jcenter}
@{b}@{u}PseudoOps ORG Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Changes value of @{" CApc " link CAPC} (Origin) to Expression


Usage:            ORG Expression


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node PUBLIC "ACCESS PseudoOps PUBLIC Help"

@{jcenter}
@{b}@{u}PseudoOps PUBLIC Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Makes given Symbol(s) visible to the Linker and Debugger


Usage:            PUBLIC SymbolName,SymbolName,...
@endnode


@node REPEAT "ACCESS PseudoOps REPEAT Help"

@{jcenter}
@{b}@{u}PseudoOps REPEAT Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Begins a repeat block of code to be duplicated (Expression)
              number of times


Usage:            REPEAT Expression


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node VAR "ACCESS PseudoOps VAR Help"

@{jcenter}
@{b}@{u}PseudoOps VAR Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Equates a Numeric Value to a Alphanumeric Symbol

              The Alphanumeric Symbol's Value may be changed at will
              during the Assembly


Usage:        SymbolName VAR Expression


Notes:        · SymbolName cannot be any reserved names

              · Expression follows order of operations

              · Expression must be evaluable at Assembly time
@endnode


@node .LONGA "ACCESS PseudoOps .LONGA Help"

@{jcenter}
@{b}@{u}PseudoOps .LONGA Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Sets Assembler/Linker's idea of processor "M" (Accumulator)
              size setting


Usage:            .LONGA ON/OFF


Notes:        · ON turns 16-bit mode on

              · OFF turns 8-bit mode on

              · NO code is generated to effectuate this change
@endnode


@node .LONGI "ACCESS PseudoOps .LONGI Help"

@{jcenter}
@{b}@{u}PseudoOps .LONGI Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Sets Assembler/Linker's idea of processor "X" (Index)
              size setting


Usage:            .LONGI ON/OFF


Notes:        · ON turns 16-bit mode on

              · OFF turns 8-bit mode on

              · NO code is generated to effectuate this change
@endnode


@node ALIGN "ACCESS PseudoOps ALIGN Help"

@{jcenter}
@{b}@{u}PseudoOps ALIGN Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Forces alignment of following code/data on boundary.


Usage:            ALIGN ExpressionAlignment,ExpressionOffset,ExpressionFill


Notes:        · Expressions follow order of operations

              · Expressions must be evaluable at Assembly time
@endnode


@node CHARSET "ACCESS PseudoOps CHARSET Help"

@{jcenter}
@{b}@{u}PseudoOps CHARSET Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Allows redefinition of default ASCII<->Binary mapping of
              character data.


Usage:            CHARSET CharSetFile


Notes:        · 256 byte file that maps each byte from it's ASCII value
                to the binary value inserted into source
@endnode


@node CPU "ACCESS PseudoOps CPU Help"

@{jcenter}
@{b}@{u}PseudoOps CPU Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Defines which processor Assembler should create code
              for.


Usage:            CPU CPUType


Notes:        · CPU may be any of @{" 6502 " link 6502}, @{" 65816 " link 65816}, @{" SPC700 " link SPC700}, @{" SFX " link SFX}
@endnode


@node CPUDATA "ACCESS PseudoOps CPUDATA Help"

@{jcenter}
@{b}@{u}PseudoOps CPUDATA Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Passes @{" MMU " link MMU} information to Linker/Debugger.


Usage:            CPUDATA


Notes:        Must be executed before any code/data in the first source
              module.
@endnode


@node DUMP "ACCESS PseudoOps DUMP Help"

@{jcenter}
@{b}@{u}PseudoOps DUMP Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Outputs current data/code block to previous @{" LOAD " link LOAD}
              or @{" ORG " link ORG} to named File


Usage:            DUMP FileName
@endnode


@node DBR "ACCESS PseudoOps DBR Help"

@{jcenter}
@{b}@{u}PseudoOps DBR Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Sets Assembler/Linker's idea of processor DataBank Register.


Usage:            DBR Expression


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node DPR "ACCESS PseudoOps DPR Help"

@{jcenter}
@{b}@{u}PseudoOps DPR Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Sets Assembler/Linker's idea of processor DirectPage
              Register.


Usage:            DPR Expression


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node IMAGE "ACCESS PseudoOps IMAGE Help"

@{jcenter}
@{b}@{u}PseudoOps IMAGE Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts named binary file into code/data block.


Usage:            IMAGE FileName
@endnode


@node MMU "ACCESS PseudoOps MMU Help"

@{jcenter}
@{b}@{u}PseudoOps MMU Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Sets Assembler/Linker's idea of Target machine.


Usage:            MMU MMUType


Notes:        MMUType may be any of the following:

                 @{" APPLE " link APPLE}            AppleII
                 @{" APPLEGS " link APPLEGS}          AppleII/GS
                 @{" C64 " link C64}              Commodore 64/128
                 @{" LS161 " link LS161}            NES LS161
                 @{" LS161X " link LS161X}           NES LS161X
                 @{" LS32 " link LS32}             NES LS32
                 @{" MMC1 " link MMC1}             NES MMC1
                 @{" MMC3A " link MMC3A}            NES MMC3A
                 @{" MMC3B " link MMC3B}            NES MMC3B
                 @{" MMC3C " link MMC3C}            NES MMC3C
                 @{" MMC5 " link MMC5}             NES MMC5
                 @{" NONE " link NONE}             No Specific Target
                 @{" NROM128 " link NROM128}          NES NROM128
                 @{" NROM256 " link NROM256}          NES NROM256
                 @{" SNES20 " link SNES20}           SNES Mode20
                 @{" SNES21 " link SNES21}           SNES Mode21
                 @{" SNES30 " link SNES30}           SNES Mode30 (HighSpeed)
                 @{" SNES31 " link SNES31}           SNES Mode31 (HighSpeed)
                 @{" SNESSFX " link SNESSFX}          SNES SFX Processor
@endnode


@node MODE "ACCESS PseudoOps MODE Help"

@{jcenter}
@{b}@{u}PseudoOps MODE Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Sets Assembler/Linker's idea of processor "M" (Accumulator)
              and "X" (Index) size settings.

              Can insert code to change to specified mode.


Usage:            MODE 'ModeParameters'


Notes:        ModeParameters can be:    a   Sets 8-bit Accumulator
                                        A   Sets 16-bit Accumulator
                                        x   Sets 8-bit Index
                                        X   Sets 16-bit Index
                                        e   Sets 8-bit Emulation Mode
                                        E   Sets 16-bit Native Mode
                                        !   Generates code to set mode
@endnode


@node PLIST "ACCESS PseudoOps PLIST Help"

@{jcenter}
@{b}@{u}PseudoOps PLIST Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Allows/Disallows following code to be included in
              Printed Listings.


Usage:            PLIST ON/OFF
@endnode


@node POPMODE "ACCESS PseudoOps POPMODE Help"

@{jcenter}
@{b}@{u}PseudoOps POPMODE Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Restores Assembler/Linker's idea of processor "M" (Accumulator)
              and "X" (Index) size settings.


Usage:            POPMODE


Notes:        · Does not generate code to change to restored mode
@endnode


@node PUSHMODE "ACCESS PseudoOps PUSHMODE Help"

@{jcenter}
@{b}@{u}PseudoOps PUSHMODE Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Saves Assembler/Linker's idea of processor "M" (Accumulator)
              and "X" (Index) size settings.


Usage:            PUSHMODE


Notes:        · Does not generate code to save mode
@endnode


@node REORG "ACCESS PseudoOps REORG Help"

@{jcenter}
@{b}@{u}PseudoOps REORG Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Changes value of @{" CApc " link CAPC} (Origin) to reflect last
              address of CApc before @{" ORG " link ORG} command plus value of all
              bytes inbetween.


Usage:            REORG
@endnode


@node SCROLL "ACCESS PseudoOps SCROLL Help"

@{jcenter}
@{b}@{u}PseudoOps SCROLL Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Sets default direction of SCROLL hardware for NES.


Usage:            SCROLL HORIZONTAL/VERTICAL
@endnode


@node SECTION "ACCESS PseudoOps SECTION Help"

@{jcenter}
@{b}@{u}PseudoOps SECTION Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Used to group blocks of code/data together.


Usage:            SECTION SectionName,SectionParameter,SectionParameter,...


Notes:        SectionParameters can be any of the following:

              ORG=Expression        Sets @{" CApc " link CAPC} to specified value at
                                    beginning of section


              LOAD=Expression       Sets @{" LoadPC " link LOADPC} to value at beginning
                                    of section

              SIZE=Expression       Sets maximum size section will be allowed
                                    to grow to

              DUMP=FileName         When section is complete, will dump
                                    contents to named File

              RELOC                 Marks section as relocatable by the
                                    Linker

              BASE=Expression       Sets base LoadPC address for Relocatable
                                    sections

              ALIGN=Expression      Sets alignment requirements for section

              RORG=Expression       Sets LoadPC/CApc alignment requirements

              ALLOC                 Allocates section from free pool
                                    (Used in conjunction with SIZE=)


              · SECTION used with no parameters defines a new RELOC section

              · SECTION Name with no parameters switches to that section

              · Relocatable sections must be placed after ALL Fixed sections

              · RORG addresses are:

                SNES21/31 usage:  RORG=$00808000      High_Banks Upper_Half

                                  RORG=$00800000      High_Banks Lower_Half

                                  RORG=$00008000      Low_Banks  Upper_Half

                                  RORG=$00000000      Low_Banks  Lower_Half


                SNESSFX usage:    RORG=$00008000      Low_Banks_32K

                                  RORG=$00400000      Low_Banks_64K

                                  RORG=$00808000      High_Banks_SNES_32K

                                  RORG=$00C00000      High_Banks_SNES_Only
                                  BASE=$80200000

@endnode


@node BYTE "ACCESS PseudoOps BYTE Help"

@{jcenter}
@{b}@{u}PseudoOps BYTE Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts BYTE(s) into code/data block


Usage:            BYTE Expression,Expression,Expression,...


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time

              · Expression may be string enclosed with single or double
                quotation marks.  If String, ASCII text will be translated
                according to @{" CHARDEF " link CHARDEF} table.
@endnode


@node WORD "ACCESS PseudoOps WORD Help"

@{jcenter}
@{b}@{u}PseudoOps WORD Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts WORD(s) into code/data block


Usage:            WORD Expression,Expression,Expression,...


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node TRIP "ACCESS PseudoOps TRIP Help"

@{jcenter}
@{b}@{u}PseudoOps TRIP Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts TRIP(s) into code/data block


Usage:            TRIP Expression,Expression,Expression,...


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node LONG "ACCESS PseudoOps LONG Help"

@{jcenter}
@{b}@{u}PseudoOps LONG Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts LONG(s) into code/data block


Usage:            LONG Expression,Expression,Expression,...


Notes:        · Expression follows order of operations

              · Expression need not be evaluable at Assembly time
@endnode


@node BBYTE "ACCESS PseudoOps BLOCK BYTE Help"

@{jcenter}
@{b}@{u}PseudoOps BLOCK BYTE Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts Block Of BYTEs into code/data block


Usage:            DCB.B ExpressionSize,ExpressionFill


Notes:        · Expressions follow order of operations

              · Expressions need not be evaluable at Assembly time
@endnode


@node BWORD "ACCESS PseudoOps BLOCK WORD Help"

@{jcenter}
@{b}@{u}PseudoOps BLOCK WORD Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts Block Of WORDs into code/data block


Usage:            DCB.W ExpressionSize,ExpressionFill


Notes:        · Expressions follow order of operations

              · Expressions need not be evaluable at Assembly time
@endnode


@node BTRIP "ACCESS PseudoOps BLOCK TRIP Help"

@{jcenter}
@{b}@{u}PseudoOps BLOCK TRIP Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts Block Of TRIPs into code/data block


Usage:            DCB.L ExpressionSize,ExpressionFill


Notes:        · Expressions follow order of operations

              · Expressions need not be evaluable at Assembly time
@endnode


@node BLONG "ACCESS PseudoOps BLOCK LONG Help"

@{jcenter}
@{b}@{u}PseudoOps BLOCK LONG Help@{ub}@{uu}
@{jleft}@{lindent 2}


Synopsis:     Inserts Block Of LONGs into code/data block


Usage:            DCB.4 ExpressionSize,ExpressionFill


Notes:        · Expressions follow order of operations

              · Expressions need not be evaluable at Assembly time
@endnode


@node INDEX
@title "ACCESS Development System 3.0 Help Index"

@{jcenter}
@{b}@{u}ACCESS Help Index@{ub}@{uu}
@{jleft}@{lindent 2}

@{" .LONGA " link .LONGA}
@{" .LONGI " link .LONGI}

@{" 6502 " link 6502}
@{" 6502 Pseudo Ops " link 6502PSOPS}
@{" 65816 " link 65816}
@{" 65816 Pseudo Ops " link 65816PSOPS}

@{" ALIGN " link ALIGN}
@{" Assembler " link XA}

@{" Block Byte " link BBYTE}
@{" Block Long " link BWORD}
@{" Block Trip " link BTRIP}
@{" Block Word " link BWORD}
@{" BYTE " link BYTE}

@{" CApc " link CAPC}
@{" CHARSET " link CHARSET}
@{" Chunk File " link CHUNKFILE}
@{" Compressor " link XC}
@{" Configuration File " link CONFIGFILE}
@{" CPU " link CPU}
@{" CPUDATA " link CPUDATA}
@{" Cross Reference File " link XREFFILE}
@{" Cutter " link CUTTER}

@{" DBR " link DBR}
@{" Debugger " link XS}
@{" DPR " link DPR}
@{" DUMP " link DUMP}

@{" END " link END}
@{" ENDIF " link ENDIF}
@{" ENDMAC " link ENDMAC}
@{" ENDREP " link ENDREP}
@{" EQU " link EQU}
@{" Exec File " link EXECFILE}
@{" EXTERN " link EXTERN}
@{" Expression Evaluation " link EXPEVAL}

@{" GLOBALS " link GLOBALS}
@{" Graphics Convertor " link XG}

@{" IFE " link IFE}
@{" IFN " link IFN}
@{" IMAGE " link IMAGE}
@{" INCLUDE " link INCLUDE}

@{" Linker " link XL}
@{" Link File " link LINKFILE}
@{" LOAD " link LOAD}
@{" LoadPC " link LOADPC}
@{" LONG " link LONG}

@{" MACRO " link MACRO}
@{" MMU " link MMU}
@{" MODE " link MODE}

@{" Object File " link OBJECTFILE}
@{" ORG " link ORG}

@{" PLIST " link PLIST}
@{" POPMODE " link POPMODE}
@{" Print File " link PRINTFILE}
@{" Pseudo Ops " link PSEUDOOPS}
@{" PUBLIC " link PUBLIC}
@{" PUSHMODE " link PUSHMODE}

@{" REORG " link REORG}
@{" REPEAT " link REPEAT}

@{" SCROLL " link SCROLL}
@{" SECTION " link SECTION}
@{" Section File " link SECTIONFILE}
@{" SFX " link SFX}
@{" SFX Pseudo Ops " link SFXPSOPS}
@{" SPC700 " link SPC700}
@{" SPC700 Pseudo Ops " link SPC700PSOPS}
@{" Source File " link SOURCEFILE}
@{" Symbol File " link SYMFILE}

@{" Toggles " link TOGGLES}
@{" TRIP " link TRIP}

@{" VAR " link VAR}
@{" Version Lister " link XX}

@{" WORD " link WORD}

@{" XRef File " link XREFFILE}
@endnode
